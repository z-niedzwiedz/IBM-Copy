;PROGRAM ZABEZBIECZAJACY IBM COPY

	JP	PZU0
	DEFM	"IBM COPY VERSION 2.1 (C) ZBIGNIEW N.
	DEFM	" 1991.06.26 PLEASE BUY, DON'T STEAL!"
	DEFM	" DB6721742 $

*I PZU1.GEN

VERDOS	CALL	CLS
	LD	DE,VDMSG
	CALL	PRDE
VERDOS1	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"VERIFY DISK IN DRIVE $
	LD	A,(DOSDRIVE)
	ADD	A,"A"
	CALL	PRINT
	CALL	PRSTR
	DEFM	" ? (Y/N):$
	CALL	GET
	RES	5,A
	CP	"Y"
	JP	NZ,M0
	CALL	PRINT
	CALL	PRLF
	CALL	PRLF
	LD	A,(DOSDRIVE)
	LD	(DRIVE),A
	XOR	A
	LD	(TRACK),A
	LD	HL,BUFOR+#2000
	LD	(MEM),HL
	CALL	LDBPB
	BIT	2,(IY+21)
	JR	Z,VD80
	LD	A,39
	JR	VD80EX
VD80	LD	A,79
VD80EX	LD	HL,TRACKS
	LD	(HL),A
	CALL	SIDEA
	CALL	DRIVEON
	CALL	HOME
VD1	CALL	VERDTRK
	LD	A,(TRACK)
	LD	HL,TRACKS
	CP	(HL)
	JR	Z,VDEX
	CALL	STEPIN
	CALL	PRESSESC
	LD	HL,TRACK
	INC	(HL)
	JR	VD1
VDEX	CALL	DRIVEOFF
	BIT	0,(IY+21)
	JP	Z,COMPLET
	CALL	SIDEB
	CALL	DRIVEON
	CALL	HOME
	XOR	A
	LD	(TRACK),A
VD2	CALL	VERDTRK
	LD	A,(TRACK)
	LD	HL,TRACKS
	CP	(HL)
	JR	Z,VD1EX
	CALL	STEPIN
	CALL	PRESSESC
	LD	HL,TRACK
	INC	(HL)
	JR	VD2
VD1EX	CALL	HOME
	CALL	DRIVEOFF
	CALL	SIDEA
	JP	COMPLET

;COPY DOS>CP/M
COPYDOS	CALL	CLS
	LD	DE,CDMSG
	CALL	PRDE
	CALL	DDIR
	CALL	NAMEDOS
	JR	NC,COPYDMENU
	CALL	COPYDF
	JP	COMPLET

COPYDF	CALL	LDDOSF
	CALL	ZMIANA
	CALL	SAVECPM
	RET

COPYDMENU	CALL	CLS
	LD	DE,CDMSG
	CALL	PRDE
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"SPACE=skip ENTER=copy ESCAPE=exit$
	LD	IX,DIR
CDM1	LD	A,(IX)
	CP	#E5
	JR	Z,CDMEX
	CP	0
	JR	Z,CDMEX
	BIT	3,(IX+11)
	JR	NZ,CDMEX
	CALL	PRCRLF
	CALL	PRFILE
CDM2	CALL	GET
	CP	ESC
	JP	Z,M0
	CP	SPACE
	JR	Z,CDMEX
	CP	CR
	JR	Z,CDM3
	LD	A,BELL
	CALL	PRINT
	JR	CDM2
CDM3	CALL	PRSTR
	DEFM	" OK - COPYING !$
	PUSH	IX
	POP	HL
	LD	DE,FCB
	LD	A,(CPMDRIVE)
	INC	A
	LD	(DE),A
	INC	DE
	LD	BC,11
	LDIR
	XOR	A
	LD	(DE),A
	CALL	COPYDF
CDMEX	CALL	DIREND
	JR	NZ,CDM1
	JP	COMPLET

NOTRACK	CALL	DRIVEOFF
	CALL	PRSTR
	DEFB	CR,LF,LF,BELL
	DEFM	"Track not found...$
	JP	ANYKEY

NOSECTOR	CALL	DRIVEOFF
	CALL	PRSTR
	DEFB	CR,LF,LF,BELL
	DEFM	"Sector not found...$
	JP	ANYKEY

NOFILE	CALL	PRSTR
	DEFB	CR,LF,LF,BELL
	DEFM	"File not found...$
	JP	ANYKEY

;COPY CP/M>DOS
COPYCPM	CALL	CLS
	LD	DE,CCMSG
	CALL	PRDE
	CALL	DCPM
	CALL	NAMECPM
	CALL	LOADCPM
	CALL	ZMIANA
	CALL	CZY_NA_A
	CALL	SVDOSF
	JP	COMPLET

;PROCEDURA WPROWADZA NAPIS O MAX. DLUGOSCI A
INPUT	CALL	CLBUFN
	LD	HL,BUFNAME
	LD	(HL),A
	EX	DE,HL
	LD	C,10;READ CONSOLE BUFFER
	CALL	BDOS1
	LD	A,BELL
	CALL	PRINT
	LD	HL,BUFNAME+1
	LD	A,(HL);LICZBA WCZYTANYCH ZNAKOW
	RET

;PROCEDURA ZAMIENIA BUFOR W POLE FCB
NAME	LD	HL,FCB+1
	LD	DE,FCB+2
	LD	BC,11
	LD	(HL),32
	LDIR
	LD	BC,23
	LD	(HL),0
	LDIR
	LD	A,(CPMDRIVE)
	INC	A
	LD	(FCB),A
	LD	A,(BUFNAME+1)
	AND	A
	RET	Z
	LD	HL,BUFNAME+2
	LD	DE,FCB+1
	LD	B,9
NAME1	LD	A,(HL)
	INC	HL
	CP	"."
	JR	Z,NAME2
	CP	"*"
	JP	Z,GWIA1
	CALL	DUZA
	LD	(DE),A
	DEC	B
	RET	Z
	INC	DE
	LD	A,(BUFNAME+1)
	DEC	A
	LD	(BUFNAME+1),A
	RET	Z
	JR	NAME1
NAME2	LD	B,3
	LD	DE,FCB+9
NA2	LD	A,(HL)
	INC	HL
	CP	"*"
	JR	Z,GWIA2
	CALL	DUZA
	LD	(DE),A
	DEC	B
	RET	Z
	INC	DE
	LD	A,(BUFNAME+1)
	DEC	A
	LD	(BUFNAME+1),A
	RET	Z
	JR	NA2

;PROCEDURA ZAMIENIA MALA LITERE NA DUZA
DUZA	CP	"a"
	RET	C
	CP	"z"+1
	RET	NC
	RES	5,A
	RET

GWIA1	DEC	B
	LD	A,(BUFNAME+1)
	DEC	A
	LD	(BUFNAME+1),A
	INC	HL
	LD	A,"?"
GWI1	LD	(DE),A
	INC	DE
	DJNZ	GWI1
	JR	NAME2

GWIA2	LD	A,"?"
GWI2	LD	(DE),A
	INC	DE
	DJNZ	GWI2
	RET

;PROCEDURA WYSZUKUJE PLIK (JEZELI JEST) W DIR
FINDFILE	LD	IX,DIR
FFILE1	LD	HL,FCB+1
	LD	B,11
	PUSH	HL
	CALL	CPMEM
	POP	HL
	RET	Z
	CALL	DIREND
	JR	NZ,FFILE1
	LD	A,#FF
	AND	A
	RET

;PROCEDURA POROWNUJE B BAJTOW O ADRESACH W IX I HL
CPMEM	PUSH	IX
	POP	DE
CPMEM1	LD	A,(DE)
	CP	(HL)
	RET	NZ
	INC	DE
	INC	HL
	DJNZ	CPMEM1
	RET

;PROCEDURA ZNAJDUJE NASTEPNY WOLNY CLUSTER
FINDFCL	LD	HL,(CLUSTER)
	INC	HL
	LD	(CLUSTER),HL
	EX	DE,HL
	LD	HL,(MAXCL)
	INC	HL
	CALL	COMP
	JR	NZ,FCL1
	LD	DE,NSMSG
	CALL	PRDE
	JP	ABORT
FCL1	LD	HL,(CLUSTER)
	CALL	LDFAT
	LD	A,H
	OR	L
	RET	Z
	JR	FINDFCL

;PROCEDURA WPISUJE ILOSC WOLNYCH KLASTROW DO (FREE)
CHKFREE	LD	HL,0
	LD	(FREE),HL
	LD	HL,2
CHKF1	LD	(CLUSTER),HL
	CALL	LDFAT
	LD	A,H
	OR	L
	JR	NZ,CHKF2
	LD	HL,(FREE)
	INC	HL
	LD	(FREE),HL
CHKF2	LD	HL,(MAXCL)
	INC	HL
	EX	DE,HL
	LD	HL,(CLUSTER)
	CALL	COMP
	RET	Z
	INC	HL
	JR	CHKF1

;PROCEDURA ZWIEKSZA IX O 32 I SPRAWDZA, CZY TO KONIEC KATALOGU
DIREND	LD	DE,32
	ADD	IX,DE
	LD	A,(IY+17)
	CALL	HIGHA
	SLA	A
	LD	H,A
	LD	L,0
	LD	DE,DIR
	ADD	HL,DE
	PUSH	IX
	POP	DE
	CALL	COMP
	RET

;PROCEDURA ZAPISUJE PLIK DOS O DLUGOSCI (NRREC) Z BUFORA
SVDOSF	LD	A,(DOSDRIVE)
	LD	(DRIVE),A
	CALL	LDBPB
	CALL	DRIVEON
	CALL	HOME
	BIT	6,A
	JP	NZ,PROTECT
	CALL	DRIVEOFF
	CALL	LOADFAT
	CALL	LDDIR
	CALL	CHKFREE
	LD	HL,(BYTCLU)
	EX	DE,HL
	LD	HL,(NRREC)
	CALL	DIVHL
	PUSH	BC
	POP	DE
	LD	HL,(FREE)
	OR	A
	SBC	HL,DE
	JR	NC,SVDF0
	LD	DE,NSMSG
	CALL	PRDE
	JP	ABORT
SVDF0	CALL	FINDFILE
	JR	NZ,SVDF01
	CALL	ERADF
SVDF01	LD	HL,1
	LD	(CLUSTER),HL
	LD	IX,DIR
SVDF1	LD	A,(IX)
	CP	0
	JR	Z,SVDF3
	CALL	DIREND
	JR	NZ,SVDF1
	LD	IX,DIR
SVDF2	LD	A,(IX)
	CP	#E5
	JR	Z,SVDF3
	CALL	DIREND
	JR	NZ,SVDF2
	LD	DE,NDMSG
	CALL	PRDE
	JP	ANYKEY
SVDF3	PUSH	IX
	POP	DE
	LD	HL,FCB+1
	LD	BC,11
	LDIR
	XOR	A
	LD	B,21
SVDF4	LD	(DE),A
	INC	DE
	DJNZ	SVDF4
	LD	HL,(NRREC)
	LD	(IX+28),L
	LD	(IX+29),H
	LD	A,H
	CP	#FF
	JR	Z,SVDFEX
	OR	L
	JR	Z,SVDFEX
	CALL	FINDFCL
	LD	HL,(CLUSTER)
	LD	(IX+26),L
	LD	(IX+27),H
SVDF5	LD	HL,(BYTCLU)
	EX	DE,HL
	LD	HL,(NRREC)
	OR	A
	SBC	HL,DE
	LD	(NRREC),HL
	JR	C,SVDFEX1
	JR	Z,SVDFEX1
	LD	HL,(CLUSTER)
	PUSH	HL
	CALL	FINDFCL
	LD	HL,(CLUSTER)
	PUSH	HL
	POP	BC
	POP	HL
	CALL	SVFAT
	JR	SVDF5
SVDFEX1	LD	BC,#FFF
	LD	HL,(CLUSTER)
	CALL	SVFAT
SVDFEX	LD	HL,BUFOR
	LD	(MEM),HL
	LD	L,(IX+26)
	LD	H,(IX+27);PIERWSZY KLASTER PLIKU
SVDOSF1	LD	(CLUSTER),HL
	CALL	SVCLUST
	LD	HL,(CLUSTER)
	CALL	LDFAT
	LD	A,H
	CP	#F
	JR	NZ,SVDOSF1
SVDFEND	LD	A,L
	CP	#FF
	JR	NZ,SVDOSF1
	CALL	SAVEFAT
	CALL	SVDIR
	RET

;PROCEDURA LADUJE PLIK DOS (JEZELI JEST) DO BUFORA
LDDOSF	LD	A,(DOSDRIVE)
	LD	(DRIVE),A
	CALL	DRIVEON
	CALL	HOME
	LD	HL,BUFOR
	LD	(MEM),HL
	LD	L,(IX+28)
	LD	H,(IX+29)
	LD	(NRREC),HL
	LD	L,(IX+26)
	LD	H,(IX+27);PIERWSZY KLASTER PLIKU
LDDOSF1	LD	(CLUSTER),HL
	CALL	FREMEM
	RET	Z
	CALL	LDCLUST
	LD	HL,(CLUSTER)
	CALL	LDFAT
	LD	A,H
	CP	#F
	JR	NZ,LDDOSF1
LDDFEND	LD	A,L
	CP	#F8
	RET	NC
	CP	#F1
	JR	NC,LDDOSF1
BADFAT	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"BAD FILE ALLOCATION TABLE !!!$
	JP	ABORT

;PROCEDURA SPRAWDZA, CZY KLASTER ZMIESCI SIE W PAMIECI
FREMEM	LD	HL,(MEM)
	EX	DE,HL
	LD	HL,(RAMTOP)
	OR	A
	SBC	HL,DE
	PUSH	HL;WOLNA PAMIEC
	LD	HL,(BYTCLU)
	POP	DE
	EX	DE,HL
	OR	A
	SBC	HL,DE
	JR	C,FM0
	JR	FM2
FM0	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"File is too long. CLEAR BUFFER (Y/N) ? $
FM1	CALL	GET
	RES	5,A
	CP	"N"
	JR	Z,FM3
	CP	"Y"
	JR	NZ,FM1
	LD	A,"Y"
	CALL	PRINT
	CALL	CLBUF
	LD	HL,(MEM)
	LD	DE,BUFOR
	OR	A
	SBC	HL,DE;HL=WGRANA DLUGOSC
	EX	DE,HL
	LD	HL,(NRREC)
	OR	A
	SBC	HL,DE
	LD	(NRREC),HL
	LD	HL,BUFOR
	LD	(MEM),HL
FM2	LD	A,#FF
	OR	A
	RET
FM3	LD	A,"N"
	CALL	PRINT
	LD	HL,(MEM)
	LD	DE,BUFOR
	OR	A
	SBC	HL,DE
	LD	(NRREC),HL
	XOR	A
	RET

FRMCPM	LD	HL,(MEM)
	EX	DE,HL
	LD	HL,(RAMTOP)
	OR	A
	SBC	HL,DE
	LD	DE,128
	OR	A
	SBC	HL,DE
	JR	C,FMC0
	JR	FMC2
FMC0	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"File is too long. CLEAR BUFFER (Y/N) ? $
FMC1	CALL	GET
	RES	5,A
	CP	"N"
	RET	Z
	CP	"Y"
	JR	NZ,FMC1
	LD	A,"Y"
	CALL	PRINT
	CALL	CLBUF
	LD	HL,BUFOR-128
	LD	(MEM),HL
	LD	HL,0
	LD	(NRREC),HL
FMC2	LD	A,#FF
	OR	A
	RET

DIRFCB	DEFB	0
	DEFM	"???????????????
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

;PIERWSZY PLIK
SFIRST	LD	C,17
SFIRST1	LD	A,(CPMDRIVE)
	INC	A
	LD	DE,DIRFCB
	LD	(DE),A
	JP	BDOS1

;NASTEPNY PLIK
SNEXT	LD	C,18
	JR	SFIRST1

;PROCEDURA OTWIERA PLIK FCB
OPEN	LD	DE,FCB
	LD	HL,32
	ADD	HL,DE
	XOR	A
	LD	(HL),A
	LD	C,15
	CALL	BDOS1
	INC	A
	RET	NZ
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"FILE DOESN'T EXIST...$
	JP	ANYKEY

;PROCEDURA ZMIENIA NAZWE PLIKU Z BUFORA
RENAME	LD	DE,BUFOR
	LD	C,23
	JP	BDOS1

;PROCEDURA KASUJE PLIK CP/M Z FCB
DELETE	LD	DE,FCB
	LD	C,19
	JP	BDOS1

;PROCEDURA WCZYTUJE 1 REKORD Z PLIKU FCB DO BUFORA
READSEQ	LD	DE,FCB
	LD	C,20
	JP	BDOS1

;PROCEDURA ZAPISUJE 1 REKORD Z BUFORA DO PLIKU FCB
WRITESEQ	LD	DE,FCB
	LD	C,21
	CALL	BDOS1
	OR	A
	RET	Z
	CALL	PRSTR
NSMSG	DEFB	CR,LF,LF
	DEFM	"NO SPACE IN DISK...$
	CALL	DELETE
	JP	ANYKEY

;PROCEDURA ZAMYKA OTWARTY PLIK FCB
CLOSE	LD	DE,FCB
	LD	C,16
	CALL	BDOS1
	INC	A
	RET	NZ
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"BAD CLOSE FILE...$
	JP	ANYKEY

;PROCEDURA ZAKLADA PLIK CP/M Z FCB; JEZELI Z=1 TO BLAD
MAKE	LD	DE,FCB
	LD	HL,12
	ADD	HL,DE
	XOR	A
	LD	B,23
MAKE1	LD	(HL),A
	INC	HL
	DJNZ	MAKE1
	LD	C,22
	CALL	BDOS1
	INC	A
	RET	NZ
	CALL	PRSTR
NDMSG	DEFB	CR,LF,LF
	DEFM	"NO SPACE IN DIRECTORY...$
	JP	ANYKEY

;PROCEDURA ZAMIENIA NAPIS W LICZBE DWUBAJTOWA-WYNIK W BC
LICZBA	LD	BC,0
	OR	A
	RET	Z
	LD	D,0
	LD	E,A
	ADD	HL,DE
	LD	A,(HL)
	SUB	"0"
	PUSH	HL
	LD	HL,0
	LD	DE,1
	CALL	MNOZHL
	PUSH	HL
	POP	BC
	POP	HL
	DEC	HL
	LD	DE,BUFNAME+1
	CALL	COMP
	RET	Z
	LD	A,(HL)
	SUB	"0"
	PUSH	HL
	PUSH	BC
	POP	HL
	LD	DE,10
	CALL	MNOZHL
	PUSH	HL
	POP	BC
	POP	HL
	DEC	HL
	LD	DE,BUFNAME+1
	CALL	COMP
	RET	Z
	LD	A,(HL)
	SUB	"0"
	PUSH	HL
	PUSH	BC
	POP	HL
	LD	DE,100
	CALL	MNOZHL
	PUSH	HL
	POP	BC
	POP	HL
	DEC	HL
	LD	DE,BUFNAME+1
	CALL	COMP
	RET	Z
	LD	A,(HL)
	SUB	"0"
	PUSH	HL
	PUSH	BC
	POP	HL
	LD	DE,1000
	CALL	MNOZHL
	PUSH	HL
	POP	BC
	POP	HL
	DEC	HL
	LD	DE,BUFNAME+1
	CALL	COMP
	RET	Z
	LD	A,(HL)
	SUB	"0"
	PUSH	HL
	PUSH	BC
	POP	HL
	LD	DE,10000
	CALL	MNOZHL
	PUSH	HL
	POP	BC
	POP	HL
	RET

;PROCEDURA POROWNUJE DE Z HL,JEZELI DE=HL Z=1
COMP	LD	A,D
	CP	H
	RET	NZ
	LD	A,E
	CP	L
	RET

;PROCEDURA WYWOLUJE FUNKCJE BIOS O NUMERZE W DE
BIOS1	LD	HL,(1);ADRES WBOOT
	ADD	HL,DE
	ADD	HL,DE
	ADD	HL,DE
	JP	(HL)

;PROCEDURA SPRAWDZA KLAWIATURE
GET	LD	E,#FF
	LD	C,6
	CALL	BDOS1
	OR	A
	JR	Z,GET
	PUSH	AF
	LD	A,BELL
	CALL	PRINT
	POP	AF
	RET

;PROCEDURA W RAZIE NACISNIECIA KLAWISZA CZEKA NA POWTORNE
;NACISNIECIE, JEZELI KLAWISZEM JEST "ESC" PRZERYWA FUNKCJE
PRESSESC	LD	C,6
	LD	E,#FF
	CALL	BDOS1
	AND	A
	RET	Z
	CP	ESC
	JP	Z,ABORT
	LD	DE,NRMMSG
	CALL	PRDE
	JR	GET

EXIT	CALL	CLS
	LD	C,0
	LD	DE,8
	CALL	BIOS1;ADRES DPH
	LD	DE,10
	ADD	HL,DE
	LD	(MEM),HL;ADRES DPB
	LD	A,"A"
	LD	(DRIVE),A
EXIT1	LD	HL,(MEM)
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	A,255
	CP	D
	CALL	Z,DPB_WAR
	LD	DE,16
	LD	HL,(MEM)
	ADD	HL,DE
	LD	(MEM),HL
	LD	A,(DRIVE)
	INC	A
	LD	(DRIVE),A
	CP	"E"
	JR	NZ,EXIT1
	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"BYE, BYE!$
	JP	0

DPB_WAR	PUSH	DE
	CALL	PRSTR
	DEFB	CR,LF,BELL
	DEFM	"WARNING! IN DRIVE $
	LD	A,(DRIVE)
	CALL	PRINT
	CALL	PRSTR
	DEFM	": INSTALLED PARAMETERS $
	POP	DE
DPBINST	LD	A,E
	CP	-15
	JR	NZ,DPBWAR1
	CALL	PRSTR
	DEFM	"CP/M 80T$
	RET
DPBWAR1	CP	-30
	JR	NZ,DPBWAR2
	CALL	PRSTR
	DEFM	"CP/M POL$
	RET
DPBWAR2	CP	-45
	JR	NZ,DPBWAR3
	CALL	PRSTR
	DEFM	"CP/M TIM$
	RET
DPBWAR3	CP	-60
	JR	NZ,DPBWAR4
	CALL	PRSTR
	DEFM	"TOS VA.4$
	RET
DPBWAR4	CP	-75
	RET	NZ
	CALL	PRSTR
	DEFM	"TOS VA.2$
	RET

;MENU GLOWNE
MENU	CALL	PRINTXY
	DEFB	0,0,EOT
	CALL	PRINV
	LD	B,24
	CALL	BSPACE
	CALL	PRSTR
	DEFM	"Z O O N  S O F T$
	LD	B,24
	CALL	BSPACE

	CALL	PRINTXY
	DEFB	1,0,EOT
	LD	B,25
	CALL	BSPACE
	CALL	PRSTR
	DEFM	"I B M  C O P Y  version 2.1$"
	LD	B,12
	CALL	BSPACE
	CALL	PRNRM

	CALL	DRIVES

	CALL	PRINTXY
	DEFB	2,0
	DEFM	"A.
CHCMSG	DEFM	"Change CP/M drive$

	CALL	PRINTXY
	DEFB	3,0
	DEFM	"B.
CCCMSG	DEFM	"Copy CP/M-->CP/M$

	CALL	PRINTXY
	DEFB	4,0
	DEFM	"C.
CCMSG	DEFM	"Copy CP/M-->DOS$

	CALL	PRINTXY
	DEFB	5,0
	DEFM	"D.
DIRCMSG	DEFM	"Dir CP/M drive$

	CALL	PRINTXY
	DEFB	6,0
	DEFM	"E.
ECMSG	DEFM	"Erase CP/M file$

	CALL	PRINTXY
	DEFB	7,0
	DEFM	"F.
FCMSG	DEFM	"Format CP/M disk$

	CALL	PRINTXY
	DEFB	8,0
	DEFM	"R.
RCMSG	DEFM	"Rename CP/M file$

	CALL	PRINTXY
	DEFB	9,0
	DEFM	"T.
TCMSG	DEFM	"Type CP/M file$

	CALL	PRINTXY
	DEFB	10,0
	DEFM	"V.
VCMSG	DEFM	"Verify CP/M disk$

	CALL	PRINTXY
	DEFB	2,45
	DEFM	"^A.
CHDMSG	DEFM	"Change DOS drive$

	CALL	PRINTXY
	DEFB	3,45
	DEFM	"^B.
CDDMSG	DEFM	"Copy DOS-->DOS$

	CALL	PRINTXY
	DEFB	4,45
	DEFM	"^C.
CDMSG	DEFM	"Copy DOS-->CP/M$

	CALL	PRINTXY
	DEFB	5,45
	DEFM	"^D.
DIRDMSG	DEFM	"Dir DOS drive$

	CALL	PRINTXY
	DEFB	6,45
	DEFM	"^E.
EDMSG	DEFM	"Erase DOS file$

	CALL	PRINTXY
	DEFB	7,45
	DEFM	"^F.
FDMSG	DEFM	"Format DOS disk$

	CALL	PRINTXY
	DEFB	8,45
	DEFM	"^R.
RDMSG	DEFM	"Rename DOS file$

	CALL	PRINTXY
	DEFB	9,45
	DEFM	"^T.
TDMSG	DEFM	"Type DOS file$

	CALL	PRINTXY
	DEFB	10,45
	DEFM	"^V.
VDMSG	DEFM	"Verify DOS disk$

	CALL	PRINTXY
	DEFB	12,16
	DEFM	"1.Print "
BPBMSG	DEFM	"DOS BIOS Parameter Block$

	CALL	PRINTXY
	DEFB	13,16
	DEFM	"2.
CHSMSG	DEFM	"Change STEP time$

	CALL	PRINTXY
	DEFB	14,16
	DEFM	"3.
SDSMSG	DEFM	"Save sector to CP/M file$

	CALL	PRINTXY
	DEFB	15,16
	DEFM	"4.
LDSMSG	DEFM	"Load sector from CP/M file$

	CALL	PRINTXY
	DEFB	16,16
	DEFM	"5.
STMSG	DEFM	"Save track to CP/M file$

	CALL	PRINTXY
	DEFB	17,16
	DEFM	"6.
LTMSG	DEFM	"Format track from CP/M file$

	CALL	PRINTXY
	DEFB	18,16
	DEFM	"7.
SDPBMSG	DEFM	"Set other DPB in drive CP/M$

	CALL	PRINTXY
	DEFB	19,16
	DEFM	"8.
PDPBMSG	DEFM	"Print DPB in drive CP/M$

	CALL	PRINTXY
	DEFB	20,16
	DEFM	"9.
POOMSG	DEFM	"Printer ON/OFF$

	CALL	PRINTXY
	DEFB	21,16
	DEFM	"0.Exit$

	CALL	PRCRLF
	CALL	PRSTR
	DEFB	CR
	DEFM	"Free memory:$
	LD	HL,(RAMTOP)
	LD	DE,BUFOR
	OR	A
	SBC	HL,DE
	CALL	PRDECHL
	LD	B,12
	CALL	BSPACE
	CALL	PRSTR
	DEFM	",    ,
	DEFB	CR,LF
	DEFM	"(C) Copyright by ZBIGNIEW NIEDZWIEDZ"
	DEFM	" Lublin,Reja 16, 1991.06.26$

	RET

DRIVES	CALL	PRINTXY
	DEFB	11,2,EOT
	CALL	PRINV
	CALL	PRSTR
	DEFM	" CP/M DRIVE> $

	LD	A,(CPMDRIVE)
	ADD	A,"A"
	CALL	PRINT

	CALL	PRSPC
	CALL	PRNRM

	LD	A,(CPMDRIVE)
	LD	C,A
	LD	DE,8
	CALL	BIOS1;ADRES DPH
	LD	DE,10
	ADD	HL,DE;ADRES DPB
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	A,255
	CP	D
	JR	NZ,DRIVES2
	PUSH	DE
	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"  DPB:$
	POP	DE
	CALL	DPBINST

DRIVES2	CALL	PRINTXY
	DEFB	11,47,EOT
	CALL	PRINV
	CALL	PRSTR
	DEFM	" DOS DRIVE> $

	LD	A,(DOSDRIVE)
	ADD	A,"A"
	CALL	PRINT

	CALL	PRSPC
	CALL	PRNRM
	RET

;PROCEDURA DRUKUJE NAPIS PODANY ZA WYWOLANIEM, AZ DO
;NAPOTKANIA ZNAKU "$"; PIERWSZE 2 BAJTY- WSPOLRZEDNE
;WYDRUKU
PRINTXY	LD	HL,#98
	EX	(SP),HL
	PUSH	AF
	CALL	XY
PR1	LD	A,(HL)
	INC	HL
	CP	EOT
	JR	Z,PREXIT
	CALL	PRINT
	JR	PR1
PREXIT	POP	AF
	EX	(SP),HL
	RET

;PROCEDURA J.W. ALE BEZ WSPOLRZEDNYCH
PRSTR	LD	HL,#E000-100
	EX	(SP),HL
	PUSH	AF
	JR	PR1

;PROCEDURA DRUKUJE B SPACJI
BSPACE	LD	A,SPACE
	CALL	PRINT
	DJNZ	BSPACE
	RET

;PROCEDURA DRUKUJE 1 SPACJE
PRSPC	LD	A,SPACE
	JP	PRINT

PRINV	LD	DE,INVMSG
	JP	PRDE

PRNRM	LD	DE,NRMMSG
	JR	PRDE

;PROCEDURA DRUKUJE CR
PRCR	LD	A,CR
	JP	PRINT

;PROCEDURA DRUKUJE LF
PRLF	LD	A,LF
	JP	PRINT

;PROCEDURA DRUKUJE CR/LF
PRCRLF	CALL	PRCR
	JR	PRLF

PRCRLFLF	CALL	PRCRLF
	JR	PRLF

;PROCEDURA DRUKUJE B ZNAKOW OD ADRESU W HL
PRCOUNT	PUSH	AF
PRCT1	LD	A,(HL)
	INC	HL
	CALL	PRINT
	DJNZ	PRCT1
	POP	AF
	RET

;PROCEDURA UMIESZCZA KURSOR NA WSPOLRZEDNYCH PODANYCH
;W KOMORKACH (HL) I (HL+1)
XY	LD	A,ESC
	CALL	PRINT
	LD	A,"Y"
	CALL	PRINT
	LD	A,(HL)
	ADD	A,32
	INC	HL
	CALL	PRINT
	LD	A,(HL)
	ADD	A,32
	INC	HL
	CALL	PRINT
	RET

;PROCEDURA DRUKUJE NA EKRANIE 1 ZNAK Z AKUMULATORA
PRINT	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	E,A
	LD	A,(PRCOM)
	LD	C,A
	CALL	BDOS1
	POP	HL
	POP	DE
	POP	BC
	RET

;PROCEDURA WYWOLUJE FUNKCJE BDOS Z ZACHOWANIEM
;REJESTROW
BDOS1	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	5
	POP	BC
	POP	DE
	POP	HL
	RET

;PROCEDURA DRUKUJE NAPIS OD (DE) DO ZNAKU "$"
PRDE	LD	C,9
	CALL	BDOS1
	RET

;PROCEDURA DRUKUJE LICZBE JEDNOBAJTOWA ZAWARTA W E
;HEKSADECYMALNIE
PRHEXE	PUSH	DE
	LD	A,"#"
	CALL	PRINT
	LD	H,0
	JR	PRHEXE1

;PROCEDURA DRUKUJE LICZBE DWUBAJTOWA ZAWARTA W DE,
;HEKSADECYMALNIE
PRHEXDE	PUSH	DE
	LD	A,"#"
	CALL	PRINT
	POP	DE
PRHEXDE1	LD	H,0
	PUSH	DE
	LD	A,D
	CALL	HIGHA
	CALL	PRHEX
	POP	DE
	PUSH	DE
	LD	A,D
	AND	#F
	CALL	PRHEX
PRHEXE1	POP	DE
	PUSH	DE
	LD	A,E
	CALL	HIGHA
	CALL	PRHEX
	POP	DE
	LD	A,E
	AND	#F
	LD	H,1
	CALL	PRHEX
	CALL	PRSPC
	RET

;PROCEDURA PRZESUWA GORNA TETRADE AKUMULATORA NA DOLNA
HIGHA	RRA
	RRA
	RRA
	RRA
	AND	#F
	RET

;PROCEDURA DRUKUJE LICZBE ZAWARTA W DOLNEJ TETRADZIE
;AKUMULATORA HEKSADECYMALNIE
PRHEX	OR	A
	JR	NZ,PRHEX1
	INC	H
	DEC	H
	JR	NZ,PRHEX1
	JP	PRSPC
PRHEX1	LD	H,1
	CP	10
	JR	C,PRHEX2
	ADD	A,"A"-10
	JP	PRINT
PRHEX2	ADD	A,"0"
	JP	PRINT

;PROCEDURA DRUKUJE DZIESIETNIE LICZBE O DLUGOSCI MAX 256 BITOW
;W HL POCZATEK 
PRDECX	LD	BC,0
	LD	(LBCD),BC
	LD	(LBCD+2),BC
	LD	(LBCD+4),BC
	PUSH	DE
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	HL
	PUSH	BC
	POP	HL;W HL DOLNE 2 BAJTY,W DE-GORNE
	LD	C,32;LICZBA BITOW
PDECX1	ADD	HL,HL
	RL	E
	RL	D
	PUSH	HL
	LD	HL,LBCD
	LD	B,5;ILE BAJTOW WYNIKOWYCH
PDECX2	LD	A,(HL)
	ADC	A,A
	DAA
	LD	(HL),A
	INC	HL
	DJNZ	PDECX2
	POP	HL;PRZETWARZANA LICZBA
	DEC	C
	JR	NZ,PDECX1
	POP	HL;ADRES OSTATNIEGO BAJTU LICZBY
	EX	(SP),HL;PIERWOTNA ZAWARTOSC DE
	EX	DE,HL
	LD	HL,LBCD+4
	LD	BC,#0510
PDECX3	LD	A,(HL)
	RRA
	RRA
	RRA
	RRA
	CALL	PDXOUT
	LD	A,1
	SUB	B
	JR	NZ,PDECX4
	LD	C,A
PDECX4	LD	A,(HL)
	DEC	HL
	CALL	PDXOUT
	DJNZ	PDECX3
	POP	HL
	RET
PDXOUT	AND	15
	JR	Z,PDXO1
	LD	C,0
PDXO1	OR	#30
	SUB	C
	PUSH	AF
	CALL	PRINT
	POP	AF
	RET

;PROCEDURA DRUKUJE LICZBE ZAWARTA W HL DZIESIETNIE
PRDECHL	PUSH	HL
	LD	A,"$"
	CALL	PRINT
	POP	HL
	LD	D,0
	LD	BC,10000
	CALL	PRDEC
PRDECHL1	LD	BC,1000
	CALL	PRDEC
PRDECL	LD	BC,100
	CALL	PRDEC
PRDECL1	LD	BC,10
	CALL	PRDEC
	LD	D,1
	LD	BC,1
PRDEC	LD	E,0
PRDEC1	LD	A,L
	SUB	C
	LD	L,A
	LD	A,H
	SBC	A,B
	LD	H,A
	JR	C,PRDEC2
	INC	E
	JR	PRDEC1
PRDEC2	ADD	HL,BC
	LD	A,E
	ADD	A,"0"
	CP	"0"
	JR	NZ,PRDEC3
	INC	D
	DEC	D
	JR	NZ,PRDEC3
	JP	PRSPC
PRDEC3	LD	D,1
	JP	PRINT

;PROCEDURA DZIELI PRZEZ SIEBIE LICZBY ZAWARTE W HL I DE
;WYNIK W A (STARSZA CZESC) I HL (MLODSZA)
;A MOZNA NADAWAC WARTOSC POCZATKOWA
DIV	OR	A
	SBC	HL,DE
	JR	C,DIVEX
	INC	A
	JR	DIV
DIVEX	ADD	HL,DE
	RET

;PROCEDURA DZIELI HL PRZEZ DE, WYNIK W BC
DIVHL	LD	BC,0
DIVHL0	OR	A
	SBC	HL,DE
	JR	C,DIVHLEX
	INC	BC
	JR	DIVHL0
DIVHLEX	ADD	HL,DE
	RET

;PROCEDURA DRUKUJE DATE Z KATALOGU Z DE
PRDATE	PUSH	DE
	SRL	D
	LD	HL,1980
	LD	E,D
	LD	D,0
	ADD	HL,DE
	LD	D,0
	CALL	PRDECHL1
	LD	A,"-"
	CALL	PRINT
	POP	DE
	PUSH	DE
	RR	D
	RR	E
	SRL	E
	SRL	E
	SRL	E
	SRL	E
	LD	H,0
	LD	L,E
	LD	D,1
	CALL	PRDECL1
	LD	A,"-"
	CALL	PRINT
	POP	DE
	LD	A,E
	AND	%00011111
	LD	H,0
	LD	L,A
	LD	D,1
	CALL	PRDECL1
	CALL	PRSPC
	RET

;PROCEDURA DRUKUJE CZAS Z KATALOGU Z DE
PRTIME	PUSH	DE
	SRL	D
	SRL	D
	SRL	D
	LD	L,D
	LD	H,0
	LD	D,0
	CALL	PRDECL1
	LD	A,":"
	CALL	PRINT
	POP	DE
	PUSH	DE
	RR	D
	RR	E
	RR	D
	RR	E
	RR	D
	RR	E
	SRL	E
	SRL	E
	LD	H,0
	LD	L,E
	LD	D,1
	CALL	PRDECL1
	LD	A,":"
	CALL	PRINT
	POP	DE
	RL	E
	LD	A,E
	AND	%00111110
	LD	H,0
	LD	L,A
	LD	D,1
	CALL	PRDECL1
	CALL	PRSPC
	RET

;PROCEDURA WLACZA DRIVE O NUMERZE (DRIVE), UZYWAJAC MASKI
;(MASK)=#5F-STRONA A;#4F-STRONA B
DRIVEON	LD	A,(DRIVE)
	INC	A
	LD	B,A
	LD	HL,MASK
	LD	A,(HL)
	OUT	(#E0),A
	LD	A,#7F
DR1	RLCA
	DJNZ	DR1
	AND	(HL)
	OUT	(#E0),A
	RET

;PROCEDURA WYLACZA DRIVE O NUMERZE (DRIVE)
DRIVEOFF	LD	A,(DRIVE)
	INC	A
	LD	B,A
	LD	A,#DF
	OUT	(#E0),A
	LD	A,#7F
DR2	RLCA
	DJNZ	DR2
	AND	#DF
	OUT	(#E0),A
	RET

;PROCEDURA UMIESZCZA SKOK DO WLASNEJ OBSLUGI PRZERWANIA
;W TRYBIE IM1
INT	LD	DE,OBSLUGA
	LD	HL,#38
	LD	(HL),#C3
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	IM	1
	RET

;OBSLUGA PRZERWANIA-PRZERYWA KAZDA MARTWA PETLE
OBSLUGA	POP	AF
	IN	A,(#C0)
	DI
	RET

;PROCEDURA PRZESUWA GLOWICE WLACZONEGO NAPEDU NA
;SCIEZKE (TRACK), Z KROKIEM (SPEED)
SEEK	CALL	INT
	LD	A,(TRACK)
	OUT	(#C3),A
	LD	A,(SPEED)
	AND	3
	OR	#10
	OUT	(#C0),A
	JR	READY

;PROCEDURA PRZESUWA GLOWICE WLACZONEGO NAPEDU NA SCIEZKE 0
;Z PREDKOSCIA (SPEED)
HOME	CALL	INT
	LD	A,(SPEED)
	AND	3
	OUT	(#C0),A
READY	EI
	LD	HL,0
HOME1	LD	B,12
	DJNZ	$
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,HOME1
	LD	A,#D0
	OUT	(#C0),A
	CALL	DRIVEOFF
NREADY	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"DRIVE NOT READY...$
	XOR	A
	LD	(DRIVE),A
	CALL	DRIVEON
	CALL	HOME
	CALL	DRIVEOFF
	JP	ABORT

;PROCEDURA PRZESUWA GLOWICE NA NASTEPNA SCIEZKE
STEPIN	LD	A,(SPEED)
	AND	3
	OR	#50
	OUT	(#C0),A

;PROCEDURA WPROWADZA OPOZNIENIE
DELAY	LD	A,#80
	LD	B,0
DEL1	NOP
	DJNZ	DEL1
	DEC	A
	JR	NZ,DEL1

;PROCEDURA CZEKA NA GOTOWOSC STEROWNIKA
BUSY	IN	A,(#C0)
	BIT	0,A
	JR	NZ,BUSY
	RET

;PROCEDURA LADUJE PIERWSZY NAPOTKANY NAGLOWEK SEKTORA DO BUFORA
RDADDR	LD	A,#C0
	OUT	(#C0),A
	CALL	INT
	LD	HL,BPB
	JR	RD1

;PROCEDURA LADUJE SCIEZKE (FIZYCZNA) DO BUFORA
RDTRK	LD	A,#E4
	OUT	(#C0),A
	CALL	INT
	LD	HL,BUFOR
RD1	LD	C,#C3
	EI
RT1	IN	A,(#2F)
	RLA
	JR	NC,RT1
	INI
	JR	RT1

;PROCEDURA ZAPISUJE FIZYCZNIE SCIEZKE Z BUFORA
WRTRK	CALL	INT
	LD	HL,BUFOR
	LD	C,#C3
	LD	A,#FE
	OUT	(#C0),A
	EI
WT1	IN	A,(#2F)
	RLA
	JR	NC,WT1
	OUTI
	JR	WT1

;PROCEDURA LADUJE DO BUFORA SEKTOR O DOWOLNEJ DLUGOSCI
LDSEC	CALL	INT
	LD	A,(SECTOR)
	OUT	(#C2),A
	LD	A,#80
	OUT	(#C0),A
	LD	HL,(MEM)
	LD	C,#C3
	EI
LS1	IN	A,(#2F)
	RLA
	JR	NC,LS1
	INI
	JR	LS1

;PROCEDURA ZAPISUJE Z BUFORA SEKTOR O DOWOLNEJ DLUGOSCI
SVSEC	CALL	INT
	LD	A,(SECTOR)
	OUT	(#C2),A
	LD	A,#A0
	OUT	(#C0),A
	LD	C,#C3
	LD	HL,(MEM)
	EI
SS1	IN	A,(#2F)
	RLA
	JR	NC,SS1
	OUTI
	JR	SS1

;ODCZYT ZAWARTOSCI TABLICY FAT; W HL-NUMER POZYCJI
LDFAT	LD	DE,FAT
	PUSH	DE
	LD	E,L
	LD	D,H
	SRL	H
	RR	L
	RRA
	ADD	HL,DE
	POP	DE
	ADD	HL,DE
	RLA
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	JR	NC,LF1
	SRL	H
	RRA
	SRL	H
	RRA
	SRL	H
	RRA
	SRL	H
	RRA
LF1	LD	L,A
	LD	A,H
	AND	#F
	LD	H,A
	OR	L
	RET

;ZAPIS DO POZYCJI FAT;HL-NUMER POZYCJI;BC-CO WPISAC
SVFAT	LD	DE,FAT
	PUSH	DE
	LD	E,L
	LD	D,H
	SRL	H
	RR	L
	RR	A
	ADD	HL,DE
	POP	DE
	ADD	HL,DE
	RLA
	JR	NC,SF1
	SLA	C
	RL	B
	SLA	C
	RL	B
	SLA	C
	RL	B
	SLA	C
	RL	B
	LD	A,(HL)
	AND	#F
	OR	C
	LD	(HL),A
	INC	HL
	LD	(HL),B
	RET
SF1	LD	(HL),C
	INC	HL
	LD	A,(HL)
	AND	#F0
	OR	B
	LD	(HL),A
	RET

;PROCEDURA INICJUJE ZMIENNE PROGRAMU
INIT	LD	HL,(6)
	LD	DE,30
	OR	A
	SBC	HL,DE
	LD	(RAMTOP),HL
	LD	C,25
	CALL	BDOS1
	LD	(CPMDRIVE),A
	XOR	A
	LD	(TRACK),A
	LD	A,1
	LD	(DOSDRIVE),A
	CALL	SIDEA
	CALL	RDS
	LD	DE,#80
	CALL	SETDMA
	LD	HL,0
	LD	(#101),HL
	LD	A,CONOUT
	LD	(PRCOM),A
	LD	HL,TOS_HEAD
	LD	A,3
	LD	BC,32768
	LD	(HL),A
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	RET

;PROCEDURA INICJUJE DYSKI (R/W)
RDS	XOR	A
	LD	(DRIVE),A
	LD	(TRACK),A
	LD	(SECTOR),A
	CALL	SIDEA
	CALL	DRIVEON
	CALL	HOME
	CALL	RDADDR
	CALL	DRIVEOFF
	LD	A,(BPB+3)
	CP	1
	JP	NZ,RDSERR
	LD	A,(BPB+1)
	CP	0
	JP	NZ,RDSERR
	LD	A,(CPMDRIVE)
	LD	(DRIVE),A
	CALL	DRIVEON
	CALL	HOME
	CALL	RDADDR
	CALL	DRIVEOFF
	LD	A,(BPB+3)
	CP	1
	JP	NZ,NIECPM
	LD	A,(BPB+1)
	CP	0
	JP	NZ,NIECPM
	LD	C,13
	CALL	BDOS1
	LD	A,(CPMDRIVE)
RDS0	LD	E,A
	LD	C,14
	CALL	BDOS1
	RET

RDSERR	CALL	PRSTR
	DEFB	CR,LF,BELL
	DEFM	"INSERT CP/M DISK INTO DRIVE A: AND PRESS ANY KEY !
	DEFB	CR,LF,BELL,EOT
	CALL	GET
	JP	RDS

;PROCEDURA CZYSCI EKRAN
CLS	LD	DE,CLSMSG
	JP	PRDE

;PROCEDURA CZYSCI 2 DOLNE LINIE
CLDOWN	CALL	PRINTXY
	DEFB	22,0,EOT
	LD	DE,CLDMSG
	JP	PRDE

;PROCEDURA CZYSCI BUFOR
CLBUF	LD	HL,0
	ADD	HL,SP
	LD	DE,BUFOR
	PUSH	DE
	OR	A
	SBC	HL,DE
	DEC	HL
	DEC	HL
	PUSH	HL
	LD	DE,BUFOR+1
	POP	BC
	POP	HL
	LD	(HL),0
	LDIR
	RET

;SZUKANIE PIERWSZEGO SEKTORA KATALOGU I WPIS DO (LOGSEC)
FINDDIR	LD	L,(IY+22)
	LD	H,(IY+23);SECTORS/FAT
	LD	A,(IY+16);ILE FAT?
	CALL	MNOZ
	LD	E,(IY+14)
	LD	D,(IY+15);RESERVED
	ADD	HL,DE
	LD	(LOGSEC),HL
	RET

;PROCEDURA MNOZY HL PRZEZ A, UZYWAJAC DE
MNOZ	PUSH	HL
	POP	DE
MNOZ1	DEC	A
	RET	Z
	ADD	HL,DE
	JR	MNOZ1

;PROCEDURA MNOZY DE PRZEZ A I DODAJE DO HL
MNOZHL	CP	0
	RET	Z
	DEC	A
	ADD	HL,DE
	JR	MNOZHL

;ZAPIS KATALOGU Z BUFORA DIR
SVDIR	CALL	FINDDIR
	LD	B,(IY+17);ILOSC ELEMENTOW KATALOGU
	SRL	B
	SRL	B
	SRL	B
	SRL	B
	LD	HL,DIR
	LD	(MEM),HL
SVDIR1	PUSH	BC
	CALL	SVLOG
	LD	HL,(MEM)
	LD	DE,512
	ADD	HL,DE
	LD	(MEM),HL
	POP	BC
	DEC	B
	RET	Z
	LD	HL,(LOGSEC)
	INC	HL
	LD	(LOGSEC),HL
	JR	SVDIR1

;ZALADOWANIE KATALOGU DO BUFORA DIR
LDDIR	CALL	FINDDIR
	LD	B,(IY+17);ILOSC ELEMENTOW KATALOGU
	SRL	B
	SRL	B
	SRL	B
	SRL	B
	LD	HL,DIR
	LD	(MEM),HL
LDDIR1	PUSH	BC
	CALL	LDLOG
	LD	HL,(MEM)
	LD	DE,512
	ADD	HL,DE
	LD	(MEM),HL
	POP	BC
	DEC	B
	RET	Z
	LD	HL,(LOGSEC)
	INC	HL
	LD	(LOGSEC),HL
	JR	LDDIR1

;PROCEDURA LADUJE FAT DO PAMIECI
LOADFAT	LD	B,(IY+22);LICZBA SEKTOROW FAT
	LD	HL,1
	LD	(LOGSEC),HL
	LD	HL,FAT
	LD	(MEM),HL
	JR	LDDIR1

;PROCERURA ZAPISUJE 2 FAT-Y Z PAMIECI
SAVEFAT	LD	B,(IY+22);LICZBA SEKTOROW FAT
	CALL	HOME
	BIT	6,A
	JP	NZ,PROTECT
	LD	HL,1
	LD	(LOGSEC),HL
	LD	HL,FAT
	LD	(MEM),HL
	CALL	SVDIR1
	LD	D,0
	LD	E,(IY+22)
	LD	HL,1
	ADD	HL,DE
	LD	(LOGSEC),HL
	LD	B,E
	LD	HL,FAT
	LD	(MEM),HL
	JP	SVDIR1

;PROCEDURA LADUJE SEKTOR O NUMERZE (LOGSEC) POD ADRES (MEM)
LDLOG	CALL	OBLLOG
	CALL	DRIVEON
	IN	A,(#C1)
	LD	HL,TRACK
	CP	(HL)
	CALL	NZ,SEEK
	LD	HL,(MEM)
	CALL	LDSEC
	AND	#1C
	CALL	NZ,BADSEC
	CALL	DRIVEOFF
	RET

;PROCEDURA ZAPISUJE SEKTOR O NUMERZE (LOGSEC) SPOD ADRESU (MEM)
SVLOG	CALL	OBLLOG
	CALL	DRIVEON
	IN	A,(#C1)
	LD	HL,TRACK
	CP	(HL)
	CALL	NZ,SEEK
	CALL	SVSEC
	AND	#1C
	CALL	NZ,BADSEC
	CALL	DRIVEOFF
	RET

;PROCEDURA OBLICZA ADRES FIZYCZNY SEKTORA (LOGSEC)
OBLLOG	LD	HL,(LOGSEC)
	LD	E,(IY+24);SECTORS/TRACK
	LD	D,(IY+25)
	XOR	A
	CALL	DIV
	LD	B,A
	LD	A,L
	INC	A;PIERWSZY SEKTOR MA NUMER 1
	LD	(SECTOR),A
	XOR	A
	LD	H,0
	LD	L,B
	LD	E,(IY+26);HEADS
	LD	D,(IY+27)
	CALL	DIV
	LD	(TRACK),A
	LD	A,L
	DEC	A
	JR	Z,SIDEB
	JR	SIDEA

;PROCEDURA WLACZA MASKE STRONY A
SIDEA	LD	A,#5F
SIDE1	LD	(MASK),A
	RET

;PROCEDURA WLACZA MASKE STRONY B
SIDEB	LD	A,#4F
	JR	SIDE1

;PROCEDURA ZAPISUJE 1 CLUSTER DOS OD ADRESU (MEM)
SVCLUST	LD	HL,(CLUSTER)
	DEC	HL
	DEC	HL
	LD	A,(IY+13);ROZMIAR KLASTRA
	CALL	MNOZ
	EX	DE,HL
	LD	HL,(STATIC)
	ADD	HL,DE
	LD	(LOGSEC),HL
	LD	B,(IY+13)
SVCL1	PUSH	BC
	CALL	SVLOG
	LD	HL,(LOGSEC)
	INC	HL
	LD	(LOGSEC),HL
	LD	HL,(MEM)
	LD	DE,512
	ADD	HL,DE
	LD	(MEM),HL
	POP	BC
	DJNZ	SVCL1
	RET

;PROCEDURA LADUJE 1 CLUSTER DOS POD ADRES (MEM)
LDCLUST	LD	HL,(CLUSTER)
	DEC	HL
	DEC	HL
	LD	A,(IY+13);ROZMIAR KLASTRA
	CALL	MNOZ
	EX	DE,HL
	LD	HL,(STATIC)
	ADD	HL,DE
	LD	(LOGSEC),HL
	LD	B,(IY+13)
LDCL1	PUSH	BC
	CALL	LDLOG
	LD	HL,(LOGSEC)
	INC	HL
	LD	(LOGSEC),HL
	LD	HL,(MEM)
	LD	DE,512
	ADD	HL,DE
	LD	(MEM),HL
	POP	BC
	DJNZ	LDCL1
	RET

;PROCEDURA CZYSCI BUFOR FAT-DIR
CLFATDIR	LD	HL,FAT
	LD	DE,FAT+1
	LD	BC,TOS_HEAD-FAT-1
	LD	(HL),0
	LDIR
	RET

;PROCEDURA USTAWIA DMA W ADRESIE DE
SETDMA	LD	C,26
	CALL	BDOS1
	RET

;PROCEDURA ZWIEKSZA DMA O 128
INCDMA	LD	DE,128
	LD	HL,(MEM)
	ADD	HL,DE
	LD	(MEM),HL
	RET

;PROCEDURA NAGRYWA BUFOR (NRREC) BAJTOW
;W PLIKU O NAZWIE W FCB
SAVECPM	CALL	RDS
	CALL	HOME
	BIT	6,A
	JP	NZ,PROTECT
	LD	C,31
	CALL	5
	LD	DE,13
	ADD	HL,DE
	LD	A,2
	CP	(HL)
	LD	HL,BUFOR
	JR	Z,SVCPM0
	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"INCLUDE HEADER ? (Y/N) $
	CALL	GET
	RES	5,A
	CP	"Y"
	LD	HL,BUFOR
	JR	NZ,SVCPM0
	CALL	PRINT
	LD	HL,(NRREC)
	LD	DE,5
	ADD	HL,DE
	LD	(NRREC),HL
	LD	HL,TOS_HEAD
SVCPM0	LD	(MEM),HL
	CALL	DELETE
	CALL	MAKE
	LD	DE,#80
	CALL	SETDMA
SVCPM1	LD	BC,#80
	LD	D,B
	LD	E,C
	LD	HL,(MEM)
	LDIR
	LD	(MEM),HL
	LD	HL,(NRREC)
	LD	A,H
	CP	#FF
	JR	Z,SVCPMEX
	OR	L
	JR	Z,SVCPMEX
	CALL	WRITESEQ
	LD	HL,(NRREC)
	LD	DE,128
	OR	A
	SBC	HL,DE
	LD	(NRREC),HL
	JR	SVCPM1
SVCPMEX	CALL	CLOSE
	RET

COMPLET	CALL	PROFF
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"FUNCTION COMPLETED.$
	CALL	ANYKEY

;PROCEDURA WGRYWA PLIK O NAZWIE W FCB DO BUFORA
LOADCPM	CALL	RDS
	LD	HL,0
	LD	(NRREC),HL
	LD	HL,BUFOR
	LD	(MEM),HL
	LD	DE,#80
	CALL	SETDMA
	CALL	OPEN
LDCPM1	CALL	READSEQ
	DEC	A
	JR	Z,LOADCEX
	CALL	FRMCPM
	RET	Z
	LD	BC,#80
	LD	HL,(MEM)
	EX	DE,HL
	LD	H,B
	LD	L,C
	LDIR
	EX	DE,HL
	LD	(MEM),HL
	LD	HL,(NRREC)
	LD	DE,128
	ADD	HL,DE
	LD	(NRREC),HL
	JR	LDCPM1
LOADCEX	LD	C,31
	CALL	5
	LD	DE,13
	ADD	HL,DE
	LD	A,2
	CP	(HL)
	RET	Z
	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"CUT HEADER ? (Y/N) $
	CALL	GET
	RES	5,A
	CP	"Y"
	RET	NZ
	CALL	PRINT
	LD	HL,(NRREC)
	PUSH	HL
	POP	BC
	LD	DE,5
	OR	A
	SBC	HL,DE
	LD	(NRREC),HL
	LD	DE,TOS_HEAD
	LD	HL,BUFOR
	LDIR
	RET
	
;PROCEDURA CZYSCI BUFNAME
CLBUFN	LD	HL,BUFNAME
	LD	DE,BUFNAME+1
	LD	BC,19
	LD	(HL),SPACE
	LDIR
	RET

START	CALL	WIZYTOWKA
	CALL	CLBUF
	CALL	INIT

M0	LD	SP,(RAMTOP)
	CALL	CLS
	CALL	MENU
M1	CALL	GET
	CP	"A"-1
	JR	C,M11
	RES	5,A
M11	LD	B,A
	LD	HL,COMTAB
M2	LD	A,(HL)
	OR	A
	JR	Z,M1
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	CP	B
	JR	NZ,M2
	EX	DE,HL
	JP	(HL)
COMTAB	DEFB	"0"
	DEFW	EXIT
	DEFB	"1"
	DEFW	PRBPB
	DEFB	"2"
	DEFW	CHGSTP
	DEFB	"3"
	DEFW	SVDSEC
	DEFB	"4"
	DEFW	LDDSEC
	DEFB	"5"
	DEFW	SVTCPM
	DEFB	"6"
	DEFW	LDTCPM
	DEFB	"7"
	DEFW	STTOS
	DEFB	"8"
	DEFW	CPMINFO
	DEFB	"9"
	DEFW	PRONOFF
	DEFB	1
	DEFW	CHGDOS
	DEFB	2
	DEFW	COPDOSD
	DEFB	3
	DEFW	COPYDOS
	DEFB	4
	DEFW	DIRDOS
	DEFB	5
	DEFW	ERADOS
	DEFB	6
	DEFW	FORDOS
	DEFB	18
	DEFW	RENDOS
	DEFB	20
	DEFW	TYPEDOS
	DEFB	22
	DEFW	VERDOS
	DEFB	"A"
	DEFW	CHGCPM
	DEFB	"B"
	DEFW	COPCPMC
	DEFB	"C"
	DEFW	COPYCPM
	DEFB	"D"
	DEFW	DIRCPM
	DEFB	"E"
	DEFW	ERACPM
	DEFB	"F"
	DEFW	FORCPM
	DEFB	"R"
	DEFW	RENCPM
	DEFB	"T"
	DEFW	TYPECPM
	DEFB	"V"
	DEFW	VERCPM
	DEFB	0

;BUFORY
LBCD	DEFS	6;LICZBA W KODZIE BCD (10 TETRAD)
FCB	DEFS	36
BUFNAME	DEFS	20
BPB	EQU	$
FAT	EQU	BPB+30
DIR	EQU	FAT+3072
TOS_HEAD	EQU	DIR+3584
BUFOR	EQU	TOS_HEAD+5

	DEFS	#100
WIZYTOWKA	CALL	CLS
	CALL	PRSTR
	DEFM	"   ,
	DEFB	CR,LF,BELL
	DEFM	"WLASCICIEL TEJ KOPII PROGRAMU:
	DEFB	CR,LF,LF,EOT
	LD	HL,CZYJE
	LD	B,63
	CALL	PRCOUNT
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"ADRES:
	DEFB	CR,LF,LF,EOT
	LD	HL,ADRES
	LD	B,63
	CALL	PRCOUNT
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"     ,
	DEFB	CR,LF
	DEFM	" NACISNIJ DOWOLNY KLAWISZ...$
	JP	GET

CZYJE	DEFM	"Zbigniew Niedzwiedz - wersja autorska (nie zabezpieczona) *****
ADRES	DEFM	"ul. Mikolaja Reja 16, 20-458 Lublin dzielnica Dziesiata *******
PZU_POCZ	EQU	#8200
PZU0	LD	BC,#1000
	LD	DE,PZU_POCZ
	LD	HL,$+8
	LDIR
	JP	PZU_POCZ

	ORG	PZU_POCZ

	CALL	CLS
	CALL	INIT
	CALL	PRSTR
	DEFM	"POCZEKAJ MOMENT...
	DEFB	CR,LF
	DEFM	"CZYTAM SYSTEM Z NAPEDU A:$
	XOR	A
	LD	(DRIVE),A
	CALL	DRIVEON
	CALL	HOME
	LD	HL,#A000
	LD	(MEM),HL
	XOR	A
	LD	(SECTOR),A
PZU01	CALL	LDSEC
	AND	#1C
	CALL	NZ,BADSEC
	LD	HL,(MEM)
	INC	H
	LD	(MEM),HL
	LD	A,(SECTOR)
	INC	A
	LD	(SECTOR),A
	CP	16
	JR	NZ,PZU01
	CALL	STEPIN
	XOR	A
	LD	(SECTOR),A
PZU02	CALL	LDSEC
	AND	#1C
	CALL	NZ,BADSEC
	LD	HL,(MEM)
	INC	H
	LD	(MEM),HL
	LD	A,(SECTOR)
	INC	A
	LD	(SECTOR),A
	CP	16
	JR	NZ,PZU02
	CALL	DRIVEOFF
	CALL	INIT
	CALL	PRSTR
	DEFB	CR,LF
	DEFM	"CZYTAM PLIK READ.ME Z NAPEDU AKTUALNEGO$
	LD	BC,11
	LD	DE,FCB+1
	LD	HL,READ_ME
	LDIR
	LD	A,(DRIVE)
	LD	(CPMDRIVE),A
	CALL	LOADCPM
	LD	BC,(NRREC)
	LD	DE,#9000
	LD	HL,BUFOR
	LDIR
	LD	HL,(NRREC)
	LD	(READ_DL),HL
PZU	CALL	CLS
	CALL	PRSTR
	DEFM	"PROGRAM ZABEZPIECZAJACY PROGRAM IBM COPY (WERSJA 2.1)
	DEFB	CR,LF,LF
	DEFM	"WSZYSTKIE DANE W PAMIECI. WYJMIJ ORYGINALNY DYSK Z NAPEDU.
	DEFB	CR,LF,LF
	DEFM	"PODAJ NAZWE NAPEDU (A..D), NA KTORY BEDZIE NAGRANY
	DEFM	" PROGRAM.
	DEFB	CR,LF,LF
	DEFM	"INNY KLAWISZ NIZ A,B,C LUB D - URUCHOMIENIE PROGRAMU.$
	CALL	GET
	RES	5,A
	PUSH	AF
	CALL	PRINT
	CALL	PRCRLFLF
	POP	AF
	CP	"A"
	JP	C,START
	CP	"D"+1
	JP	NC,START
	SUB	"A"
	LD	(DRIVE),A
	CALL	SIDEA
	CALL	DRIVEON
	CALL	HOME
	BIT	6,A
	JP	Z,PZU1
	CALL	DRIVEOFF
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"ZABEZPIECZONA DYSKIETKA...$
	CALL	GET
	JP	PZU
PZU1	CALL	DRIVEOFF
	CALL	PRSTR
	DEFM	"CZY FORMATOWAC DYSKIETKE? (T/N) $
	CALL	GET
	RES	5,A
	PUSH	AF
	CALL	PRINT
	POP	AF
	CP	"T"
	JR	NZ,PZU11
	LD	A,41
	LD	(TRACKS),A
	CALL	PRLF
	CALL	PRLF
	XOR	A
	LD	(TRACK),A
	CALL	CPMTRK
	CALL	DRIVEON
	CALL	HOME
PZUFC1	CALL	PRSTR
	DEFB	CR
	DEFM	"Format track:$
	LD	HL,BUFOR+75+1
	LD	L,(HL)
	LD	H,0
	LD	D,0
	CALL	PRDECL1
	CALL	WRTRK
	CALL	VERCTRK
	LD	A,(TRACK)
	LD	HL,TRACKS
	CP	(HL)
	JR	Z,PZU11
	CALL	PRESSESC
	CALL	STEPIN
	LD	HL,TRACK
	INC	(HL)
	CALL	NEXTCTRK
	JR	PZUFC1

PZU11	CALL	DRIVEOFF
	CALL	CPMTRK
	CALL	NEXTCTRK
	LD	HL,BUFOR+#158E
	LD	(HL),222
	INC	HL
	LD	(HL),2
	LD	DE,40
	ADD	HL,DE
	PUSH	HL
	POP	DE
	INC	DE
	LD	BC,511
	LDIR
	INC	HL
	LD	(HL),#F7
	INC	HL
	LD	(HL),#4E
	INC	DE
	INC	DE
	LD	BC,500
	LDIR
	CALL	DRIVEON
	CALL	HOME
	CALL	STEPIN
	CALL	WRTRK
	LD	BC,512
	LD	DE,BUFOR
	LD	HL,#1200
	LDIR
	LD	A,222
	LD	(SECTOR),A
	LD	HL,BUFOR
	LD	(MEM),HL
	CALL	SVSEC
	AND	#1C
	JP	Z,PZU2
	CALL	BADSEC
	CALL	DRIVEOFF
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"KLOPOTY Z SEKTOREM...$
	CALL	GET
	JP	PZU
PZU2	CALL	HOME
	LD	HL,#A000
	LD	(MEM),HL
	XOR	A
	LD	(SECTOR),A
PZU21	CALL	SVSEC
	AND	#1C
	CALL	NZ,BADSEC
	LD	HL,(MEM)
	INC	H
	LD	(MEM),HL
	LD	A,(SECTOR)
	INC	A
	LD	(SECTOR),A
	CP	16
	JR	NZ,PZU21
	CALL	STEPIN
	XOR	A
	LD	(SECTOR),A
PZU22	CALL	SVSEC
	AND	#1C
	CALL	NZ,BADSEC
	LD	HL,(MEM)
	INC	H
	LD	(MEM),HL
	LD	A,(SECTOR)
	INC	A
	LD	(SECTOR),A
	CP	16
	JR	NZ,PZU22
	CALL	DRIVEOFF
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"PODAJ PERSONALIA NABYWCY (MAX.63 LITERY)
	DEFB	CR,LF,LF,EOT
	CALL	INPADR
	LD	BC,63
	LD	DE,CZYJE
	LD	HL,BUFOR+2
	LDIR

	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"PODAJ ADRES NABYWCY (MAX.63 LITERY)
	DEFB	CR,LF,LF,EOT
	CALL	INPADR
	LD	BC,63
	LD	DE,ADRES
	LD	HL,BUFOR+2
	LDIR
	LD	BC,ADRES
	LD	DE,BUFOR
	LD	HL,#100
	LDIR
	CALL	PRSTR
	DEFB	CR,LF,LF
	DEFM	"TERMINAL TIMEX CZY POLBRIT? (T/P) $
	CALL	GET
	RES	5,A
	PUSH	AF
	CALL	PRINT
	CALL	PRCRLFLF
	POP	AF
	CP	"P"
	JR	NZ,PZU3
	CALL	PRSTR
	DEFM	"KODY TERMINALA POLBRIT.$
	LD	A,"F"
	LD	(INVMSG+1+BUFOR-#100),A
	LD	A,"G"
	LD	(NRMMSG+1+BUFOR-#100),A
	LD	A,EOT
	LD	(NRMMSG+2+BUFOR-#100),A
	LD	A,"E"
	LD	(CLSMSG+1+BUFOR-#100),A
	LD	A,"L"
	LD	(CLDMSG+1+BUFOR-#100),A
	LD	(CLDMSG+4+BUFOR-#100),A
PZU3	LD	HL,DEKODER
	LD	(BUFOR+1),HL
KODER	LD	HL,POCZATEK+BUFOR-#100
	LD	BC,ADRES-POCZATEK+100
	LD	A,R
	LD	(TRACKS+BUFOR-#100),A
	LD	R,A
KOD1	LD	A,R
	XOR	(HL)
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,KOD1
	LD	DE,BUFOR+#1100
	LD	BC,126
	LD	HL,CZYJE
	LDIR
	INC	HL
	LD	BC,385
KOD2	LD	A,R
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,KOD2
	LD	HL,ADRES
	LD	(NRREC),HL
	LD	BC,11
	LD	DE,FCB+1
	LD	HL,IC_COM
	LDIR
	LD	A,(DRIVE)
	LD	(CPMDRIVE),A
	CALL	SAVECPM
	LD	HL,(READ_DL)
	LD	(NRREC),HL
	PUSH	HL
	POP	BC
	LD	DE,BUFOR
	LD	HL,#9000
	LDIR
	LD	BC,11
	LD	DE,FCB+1
	LD	HL,READ_ME
	LDIR
	CALL	SAVECPM
	JP	PZU
IC_COM	DEFM	"IC      COM"
READ_ME	DEFM	"READ    ME "
READ_DL	DEFS	2
INPADR	LD	BC,70
	LD	DE,BUFOR+1
	LD	HL,BUFOR
	LD	(HL),SPACE
	LDIR
	LD	HL,BUFOR
	LD	(HL),63
	EX	DE,HL
	LD	C,10
	CALL	BDOS1
	RET
BC,70
	LD	DE,BUFOR+1
	LD	HL,BUFOR
	LD	(HL),SPACE
	LDIR
	LD	HL,BUFOR
	LD	(HL),63
	EX	DE,HL
	